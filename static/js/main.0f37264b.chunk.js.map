{"version":3,"sources":["queries/queries.js","components/views/SongList.js","components/views/SongDetails.js","components/views/FilterButtons.js","components/pages/Main.js","components/views/ListAdmin.js","components/views/SingerListAdmin.js","components/views/EditSong.js","components/views/SongDetailsAdmin.js","App.js","serviceWorker.js","index.js"],"names":["getSongsQuery","gql","_templateObject","getSongQuery","_templateObject2","getSingersQuery","_templateObject3","deleteSingerMutation","_templateObject4","_templateObject5","updateSongMutation","_templateObject6","_templateObject7","deleteSongMutation","_templateObject8","SongList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","data","rangeFilter","loading","react_default","a","createElement","className","songs","filter","song","year","startsWith","map","key","id","onClick","onSelectSong","name","displaySongs","Component","graphql","SongDetail","Fragment","react_apollo_esm","query","variables","songId","_ref","l","error","CSSTransition","in","classNames","type","onClose","style","position","paddingBottom","paddingTop","height","alignItems","title","top","left","width","src","concat","link","split","frameBorder","lyrics","composer","whiteSpace","verse","singer","options","FilterButtons","yearFilter","Main","_useState","useState","_useState2","slicedToArray","setSelected","_useState3","_useState4","yearRange","setYearRange","_useState5","_useState6","initLoad","setInitLoad","views_FilterButtons","views_SongList","SongDetails","ListAdmin","isDisplayed","setDisplayed","action","setAction","typeName","columns","columnNames","col","keys","flat","values","rowEditAction","colName","dataRow","ListAdmin_DataRow","assign","editAction","deleteAction","ListAdmin_Modal","mutation","DataRow","Modal","display","confirm","getSingers","ListAdmin_ListAdmin","Singer Name","Singer Id","singers","mapSingersToRows","EditSong","handleSubmit","e","preventDefault","FormData","target","singerIdArray","get","forEach","push","trim","singerId","refetchQueries","then","catch","err","console","log","onSubmit","compose","withApollo","getSongs","Song Name","Song Id","deleteMutation","views_EditSong","require","config","client","ApolloClient","uri","process","cache","InMemoryCache","dataIdFromObject","o","_id","__typename","Admin","react_router","path","match","component","SongDetailsAdmin","SingerListAdmin","App","item","setState","react_router_dom","exact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f37264b.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nconst getSongsQuery = gql`\r\n  {\r\n    songs {\r\n      name\r\n      id\r\n      year\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSongQuery = gql`\r\n  query($id: ID) {\r\n    song(id: $id) {\r\n      id\r\n      name\r\n      year\r\n      composer\r\n      lyrics\r\n      verse\r\n      link\r\n      singer {\r\n        id\r\n        name\r\n        age\r\n        songs {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingersQuery = gql`\r\n  {\r\n    singers {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst addSingerMutation = gql`\r\n  mutation AddSinger($name: String!, $age: Int!) {\r\n    addSinger(name: $name, age: $age) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst deleteSingerMutation = gql`\r\n  mutation DeleteSingerMutation($id: ID!) {\r\n    deleteSinger(id: $id) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst addSongMutation = gql`\r\n  mutation AddSong(\r\n    $name: String!\r\n    $year: String!\r\n    $composer: String!\r\n    $singerId: [String]!\r\n    $lyrics: String!\r\n    $verse: String!\r\n    $link: String!\r\n  ) {\r\n    addSong(\r\n      name: $name\r\n      year: $year\r\n      composer: $composer\r\n      singerId: $singerId\r\n      lyrics: $lyrics\r\n      verse: $verse\r\n      link: $link\r\n    ) {\r\n      name\r\n      year\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateSongMutation = gql`\r\n  mutation UpdateSongMutation(\r\n    $id: ID!\r\n    $name: String!\r\n    $year: String!\r\n    $composer: String!\r\n    $singerId: [String]!\r\n    $lyrics: String!\r\n    $verse: String!\r\n    $link: String!\r\n  ) {\r\n    updateSong(\r\n      id: $id\r\n      name: $name\r\n      year: $year\r\n      composer: $composer\r\n      singerId: $singerId\r\n      lyrics: $lyrics\r\n      verse: $verse\r\n      link: $link\r\n    ) {\r\n      id\r\n      name\r\n      year\r\n    }\r\n  }\r\n`;\r\n\r\nconst deleteSongMutation = gql`\r\n  mutation DeleteSongMutation($id: ID!) {\r\n    deleteSong(id: $id) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  getSongsQuery,\r\n  getSongQuery,\r\n  getSingersQuery,\r\n  addSingerMutation,\r\n  addSongMutation,\r\n  updateSongMutation,\r\n  deleteSingerMutation,\r\n  deleteSongMutation\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getSongsQuery } from \"../../queries/queries\";\r\n\r\nclass SongList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: null\r\n    };\r\n  }\r\n\r\n  displaySongs() {\r\n    let data = this.props.data;\r\n    const { rangeFilter } = this.props;\r\n    if (data.loading) {\r\n      return <div className=\"load-song-list\">Loading Songs</div>;\r\n    } else if (data.songs) {\r\n      return data.songs\r\n        .filter(song => song.year.startsWith(rangeFilter))\r\n        .map(song => (\r\n          <div\r\n            className=\"song-row\"\r\n            key={song.id}\r\n            onClick={() => this.props.onSelectSong(song.id)}\r\n          >\r\n            {song.name} ({song.year})\r\n          </div>\r\n        ));\r\n    } else {\r\n      return <div className=\"load-song-list\">Server disconnected</div>;\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"paper\">\r\n        {/* <div className=\"\"> */}\r\n        {this.displaySongs()}\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getSongsQuery)(SongList);\r\n","import React, { Component } from \"react\";\r\nimport { graphql, Query } from \"react-apollo\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { getSongQuery } from \"../../queries/queries\";\r\n\r\nclass SongDetail extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Query query={getSongQuery} variables={{ id: this.props.songId }}>\r\n          {({ data, loading, error }) => {\r\n            let l = loading;\r\n            let className = \"song-details\";\r\n            const { song } = data;\r\n\r\n            return song ? (\r\n              <CSSTransition in={!l} classNames=\"song-details\">\r\n                <div id={song.name} className={className}>\r\n                  <div className=\"close-button-container\">\r\n                    <button\r\n                      className=\"hollow-button close-button\"\r\n                      type=\"button\"\r\n                      onClick={this.props.onClose}\r\n                    >\r\n                      <span>Close</span>\r\n                    </button>\r\n                  </div>\r\n\r\n                  <h4 className=\"song-name\">{song.name}</h4>\r\n                  <div\r\n                    className=\"video\"\r\n                    style={{\r\n                      position: \"relative\",\r\n                      paddingBottom: \"56.25%\" /* 16:9 */,\r\n                      paddingTop: 25,\r\n                      height: 0,\r\n                      alignItems: \"center\"\r\n                    }}\r\n                  >\r\n                    <iframe\r\n                      title={song.name}\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: \"100%\",\r\n                        height: \"80%\"\r\n                      }}\r\n                      src={`https://www.youtube.com/embed/${\r\n                        song.link.split(\"=\")[1]\r\n                      }`}\r\n                      frameBorder=\"0\"\r\n                    />\r\n                  </div>\r\n                  <h4>\r\n                    <b className=\"bold-prefix\">Lyrics:</b> {song.lyrics}\r\n                  </h4>\r\n                  <h4>\r\n                    <b>Music:</b> {song.composer}\r\n                  </h4>\r\n                  <h4>\r\n                    <b>Verse:</b>\r\n                  </h4>\r\n                  <h4 style={{ whiteSpace: \"pre-wrap\" }}>{song.verse}</h4>\r\n                  <h4>\r\n                    <b>Singers:</b>\r\n                  </h4>\r\n\r\n                  {song.singer.map(singer => (\r\n                    <div key={singer.id}>\r\n                      <h4>{singer.name}</h4>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CSSTransition>\r\n            ) : (\r\n              <h2 className=\"song-name\">Loading Song details....</h2>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getSongQuery, {\r\n  options: props => {\r\n    return {\r\n      variables: {\r\n        id: props.songId\r\n      }\r\n    };\r\n  }\r\n})(SongDetail);\r\n","import React from \"react\";\r\n\r\nconst FilterButtons = props => {\r\n  const { yearFilter } = props;\r\n  return (\r\n    <div className=\"filter-buttons-container\">\r\n      <button\r\n        className=\"hollow-button filter-button-gold\"\r\n        onClick={() => yearFilter(\"198\")}\r\n      >\r\n        1980's\r\n      </button>\r\n      <button\r\n        className=\"hollow-button filter-button-orange\"\r\n        onClick={() => yearFilter(\"199\")}\r\n      >\r\n        1990's\r\n      </button>\r\n      <button\r\n        className=\"hollow-button filter-button-green\"\r\n        onClick={() => yearFilter(\"200\")}\r\n      >\r\n        2000's\r\n      </button>\r\n      <button\r\n        className=\"hollow-button filter-button-blue\"\r\n        onClick={() => yearFilter(\"201\")}\r\n      >\r\n        2010's\r\n      </button>\r\n      <button\r\n        className=\"hollow-button filter-button-white\"\r\n        onClick={() => yearFilter(\"\")}\r\n      >\r\n        All\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterButtons;\r\n","import React, { useState } from \"react\";\r\nimport SongList from \"../views/SongList\";\r\nimport SongDetails from \"../views/SongDetails\";\r\nimport FilterButtons from \"../views/FilterButtons\";\r\n\r\nconst Main = props => {\r\n  const [selected, setSelected] = useState(null);\r\n  const [yearRange, setYearRange] = useState(\"\");\r\n  const [initLoad, setInitLoad] = useState(true);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main\">\r\n        <h1 className=\"App-title\">NDP Songs</h1>\r\n        <FilterButtons yearFilter={setYearRange} />\r\n        <div className=\"bulk\">\r\n          <SongList onSelectSong={setSelected} rangeFilter={yearRange} />\r\n          {selected ? (\r\n            <div className={selected ? \"details-expand\" : \"details\"}>\r\n              <SongDetails\r\n                songId={selected}\r\n                onClose={() => {\r\n                  setSelected(\"\");\r\n                  setInitLoad(false);\r\n                }}\r\n              />\r\n            </div>\r\n          ) : !selected && initLoad ? (\r\n            <div id=\"empty-details\" />\r\n          ) : (\r\n            <div id=\"empty-details\" className=\"details\" />\r\n          )}\r\n        </div>\r\n        <div className=\"footer\">\r\n          Disclaimer: I do not own any part of the lyrics, music or any\r\n          materials of the songs.\r\n          <div>\r\n            All songs and information are from retrieved from sources around the\r\n            internet\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { deleteSingerMutation } from \"../../queries/queries\";\r\n\r\nexport const ListAdmin = props => {\r\n  const [isDisplayed, setDisplayed] = useState(false);\r\n  const [selected, setSelected] = useState(null);\r\n  const [action, setAction] = useState(null);\r\n  const { typeName, columns, data } = props;\r\n\r\n  const columnNames = columns.map(col => Object.keys(col)).flat();\r\n  const keys = columns.map(col => Object.values(col)).flat();\r\n\r\n  const rowEditAction = (id, action) => {\r\n    setSelected(id);\r\n    setDisplayed(true);\r\n    setAction(action);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{typeName}</h2>\r\n      <table>\r\n        <tbody>\r\n          <tr className=\"paperRow\">\r\n            {columnNames.map(colName => (\r\n              <td key={colName}> {colName}</td>\r\n            ))}\r\n          </tr>\r\n          {data.map(dataRow => (\r\n            <DataRow\r\n              {...props}\r\n              keys={keys}\r\n              data={dataRow}\r\n              editAction={rowEditAction}\r\n              deleteAction={setDisplayed}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <Modal\r\n        selected={selected}\r\n        isDisplayed={isDisplayed}\r\n        setDisplayed={setDisplayed}\r\n        mutation={action}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DataRow = props => {\r\n  const { keys, data, editAction } = props;\r\n  return (\r\n    <tr key={data[keys[0]]}>\r\n      {keys.map(key => (\r\n        <>\r\n          <td key={key}>{data[key]}</td>\r\n        </>\r\n      ))}\r\n      <td>\r\n        <button onClick={() => editAction(\"edit\")}>Edit</button>\r\n      </td>\r\n      <td>\r\n        <button onClick={() => editAction(data.id, deleteSingerMutation)}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport const Modal = props => {\r\n  const { selected, isDisplayed, setDisplayed, mutation } = props;\r\n  return (\r\n    <div\r\n      className=\"modal-background\"\r\n      style={{ display: isDisplayed ? \"\" : \"none\" }}\r\n    >\r\n      <div className=\"modal\">\r\n        <header>Title</header>\r\n        Modal Children\r\n        <footer>\r\n          <button onClick={() => setDisplayed(false)}>Cancel</button>\r\n          {mutation ? (\r\n            <Mutation mutation={mutation} variables={{ selected }}>\r\n              {confirm => <button onClick={confirm}>Confirm</button>}\r\n            </Mutation>\r\n          ) : (\r\n            <button>Loading</button>\r\n          )}\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getSingersQuery } from \"../../queries/queries\";\r\nimport { ListAdmin } from \"./ListAdmin\";\r\n\r\nconst getSingers = graphql(getSingersQuery);\r\n\r\nconst mapSingersToRows = (data, setDisplayed) => {\r\n  if (!data.loading) {\r\n    return data.singers.map(singer => (\r\n      <tr key={singer.id}>\r\n        <td>{singer.name}</td>\r\n        <td> {singer.id}</td>\r\n        <td>\r\n          <button onClick={() => setDisplayed(true)}>Edit</button>\r\n        </td>\r\n        <td>\r\n          <button>Delete</button>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  }\r\n};\r\n\r\nconst SingerListAdmin = props => {\r\n  const { data } = props;\r\n  const [isDisplayed, setDisplayed] = useState(false);\r\n  if (!data.loading) {\r\n    return (\r\n      <ListAdmin\r\n        typeName={\"Singer List\"}\r\n        columns={[{ \"Singer Name\": \"name\" }, { \"Singer Id\": \"id\" }]}\r\n        data={data.singers}\r\n      >\r\n        {mapSingersToRows(data, setDisplayed)}\r\n      </ListAdmin>\r\n    );\r\n  } else {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n};\r\n\r\nexport default getSingers(SingerListAdmin);\r\n","import React, { Component } from \"react\";\r\nimport { updateSongMutation, getSongsQuery } from \"../../queries/queries\";\r\nimport { graphql, compose, withApollo } from \"react-apollo\";\r\n\r\nclass EditSong extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const data = new FormData(e.target);\r\n    let singerIdArray = [];\r\n    data\r\n      .get(\"singerId\")\r\n      .split(\",\")\r\n      .forEach(id => singerIdArray.push(id.trim()));\r\n    this.props\r\n      .updateSongMutation({\r\n        variables: {\r\n          id: data.get(\"id\"),\r\n          name: data.get(\"name\"),\r\n          year: data.get(\"year\"),\r\n          composer: data.get(\"composer\"),\r\n          singerId: singerIdArray,\r\n          lyrics: data.get(\"lyrics\"),\r\n          verse: `${data.get(\"verse\")}`,\r\n          link: data.get(\"link\")\r\n        },\r\n        refetchQueries: [{ query: getSongsQuery }]\r\n      })\r\n      .then()\r\n      .catch(err => console.log(err));\r\n  };\r\n  render() {\r\n    return (\r\n      <form id=\"add-song\" onSubmit={this.handleSubmit}>\r\n        <h1>Edit Song</h1>\r\n        <div>\r\n          <label>Song Id</label>\r\n          <input type=\"text\" name=\"id\" />\r\n        </div>\r\n        <div>\r\n          <label>Song Name</label>\r\n          <input type=\"text\" name=\"name\" />\r\n        </div>\r\n        <div>\r\n          <label>Year</label>\r\n          <input type=\"text\" name=\"year\" />\r\n        </div>\r\n        <div>\r\n          <label>Composer</label>\r\n          <input type=\"text\" name=\"composer\" />\r\n        </div>\r\n        <div>\r\n          <label>Singer Id</label>\r\n          <textarea type=\"text\" name=\"singerId\" />\r\n        </div>\r\n        <div>\r\n          <label>Lyrics</label>\r\n          <input type=\"text\" name=\"lyrics\" />\r\n        </div>\r\n        <div>\r\n          <label>Verse</label>\r\n          <textarea type=\"text\" name=\"verse\" />\r\n        </div>\r\n        <div>\r\n          <label>Link</label>\r\n          <input type=\"text\" name=\"link\" />\r\n        </div>\r\n        <button type=\"submit\">Edit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(updateSongMutation, { name: \"updateSongMutation\" }),\r\n  withApollo\r\n)(EditSong);\r\n","import React from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getSongsQuery } from \"../../queries/queries\";\r\nimport { ListAdmin } from \"./ListAdmin\";\r\nimport EditSong from \"./EditSong\";\r\nimport { deleteSongMutation } from \"../../queries/queries\";\r\n\r\nconst getSongs = graphql(getSongsQuery);\r\n\r\nconst SongDetailsAdmin = props => {\r\n  const { data } = props;\r\n  if (!data.loading) {\r\n    return (\r\n      <>\r\n        <ListAdmin\r\n          typeName={\"Song List\"}\r\n          columns={[{ \"Song Name\": \"name\" }, { \"Song Id\": \"id\" }]}\r\n          data={data.songs}\r\n          deleteMutation={deleteSongMutation}\r\n        />\r\n        <EditSong />\r\n      </>\r\n    );\r\n  } else {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n};\r\n\r\nexport default getSongs(SongDetailsAdmin);\r\n","import React, { Component } from \"react\";\r\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport Main from \"./components/pages/Main\";\r\nimport SingerListAdmin from \"./components/views/SingerListAdmin\";\r\nimport SongDetailsAdmin from \"./components/views/SongDetailsAdmin\";\r\n\r\nconst dotenv = require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_DB_URL,\r\n  cache: new InMemoryCache({\r\n    dataIdFromObject: o => (o._id ? `${o.__typename}:${o._id}` : null)\r\n  })\r\n});\r\n\r\nconst Admin = props => (\r\n  <div>\r\n    <Switch>\r\n      <Route path={`${props.match.path}/songs`} component={SongDetailsAdmin} />\r\n\r\n      <Route path={`${props.match.path}/singers`} component={SingerListAdmin} />\r\n    </Switch>\r\n  </div>\r\n);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    selected: \"\"\r\n  };\r\n\r\n  setSelected = item => {\r\n    this.setState({ selected: item });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <Router>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n        </Router>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}